//This file is automatically generated. DO NOT EDIT!

#ifndef ROBOTRACONTEUR_USE_STDAFX
#include "edu__rpi__cats__sensors__kinect2_tracker_stubskel.h"
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
#else
#include "stdafx.h"
#endif
namespace edu
{
namespace rpi
{
namespace cats
{
namespace sensors
{
namespace kinect2_tracker
{
std::string edu__rpi__cats__sensors__kinect2_trackerFactory::GetServiceName()
{
return "edu.rpi.cats.sensors.kinect2_tracker";
}
std::string edu__rpi__cats__sensors__kinect2_trackerFactory::DefString()
{
std::string out(
"service edu.rpi.cats.sensors.kinect2_tracker\n"
"import edu.rpi.cats.sensors.camera_interface\n"
"\n"
"option version 0.5\n"
"\n"
"struct HandData\n"
"field uint16 color_x\n"
"field uint16 color_y\n"
"field uint16 depth_x\n"
"field uint16 depth_y\n"
"field double x\n"
"field double y\n"
"field double z\n"
"end struct\n"
"\n"
"object HandTracker\n"
"\n"
"function uint8 EnableSensors()\n"
"function uint8 DisableSensors()\n"
"\n"
"function edu.rpi.cats.sensors.camera_interface.ImageHeader getImageHeader()\n"
"function edu.rpi.cats.sensors.camera_interface.ImageHeader getDepthImageHeader()\n"
"\n"
"function edu.rpi.cats.sensors.camera_interface.Image getCurrentImage()\n"
"function edu.rpi.cats.sensors.camera_interface.Image16 getCurrentDepthImage()\n"
"\n"
"function HandData getLeftHand()\n"
"function HandData getRightHand()\n"
"\n"
"end object\n"
);
return out;
}
RR_SHARED_PTR<RobotRaconteur::StructureStub> edu__rpi__cats__sensors__kinect2_trackerFactory::FindStructureStub(std::string s)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(s);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (objecttype=="HandData") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<HandData_stub>(GetNode()));
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> edu__rpi__cats__sensors__kinect2_trackerFactory::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRStructure> structin)
{
std::string type=structin->RRType();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "edu.rpi.cats.sensors.kinect2_tracker") return GetNode()->PackStructure(structin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->PackStructure(structin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::RRObject> edu__rpi__cats__sensors__kinect2_trackerFactory::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> mstructin)
{
std::string type=mstructin->GetTypeString();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "edu.rpi.cats.sensors.kinect2_tracker") return GetNode()->UnpackStructure(mstructin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->UnpackStructure(mstructin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceStub> edu__rpi__cats__sensors__kinect2_trackerFactory::CreateStub(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::ClientContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "edu.rpi.cats.sensors.kinect2_tracker") return GetNode()->GetServiceType(servicetype)->CreateStub(type,path,context);
if (objecttype=="HandTracker") { RR_SHARED_PTR<HandTracker_stub> o=(RR_MAKE_SHARED<HandTracker_stub>(path,context)); o->RRInitStub(); return o; }
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceSkel> edu__rpi__cats__sensors__kinect2_trackerFactory::CreateSkel(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::RRObject> obj, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "edu.rpi.cats.sensors.kinect2_tracker") return GetNode()->GetServiceType(servicetype)->CreateSkel(type,path,obj,context);
if (objecttype=="HandTracker") {RR_SHARED_PTR<HandTracker_skel> o=RR_MAKE_SHARED<HandTracker_skel>(); o->Init(path,obj,context); return o; }
throw RobotRaconteur::ServiceException("Invalid structure skel type.");
return RR_SHARED_PTR<RobotRaconteur::ServiceSkel>();
}
void edu__rpi__cats__sensors__kinect2_trackerFactory::DownCastAndThrowException(RobotRaconteur::RobotRaconteurException& rr_exp)
{
std::string rr_type=rr_exp.Error;
if (rr_type.find('.')==std::string::npos)
{
	return;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "edu.rpi.cats.sensors.kinect2_tracker") GetNode()->DownCastAndThrowException(rr_exp);
return;
}
RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> edu__rpi__cats__sensors__kinect2_trackerFactory::DownCastException(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> rr_exp){
if (!rr_exp) return rr_exp;
std::string rr_type=rr_exp->Error;
if (rr_type.find('.')==std::string::npos)
{
	return rr_exp;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "edu.rpi.cats.sensors.kinect2_tracker") return GetNode()->DownCastException(rr_exp);
return rr_exp;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> HandData_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<HandData > s2=RobotRaconteur::rr_cast<HandData >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("color_x",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint16_t >(s2->color_x))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("color_y",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint16_t >(s2->color_y))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("depth_x",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint16_t >(s2->depth_x))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("depth_y",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint16_t >(s2->depth_y))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("x",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(s2->x))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("y",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(s2->y))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("z",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(s2->z))));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("edu.rpi.cats.sensors.kinect2_tracker.HandData",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> HandData_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<HandData > ret=RR_MAKE_SHARED<HandData >();
ret->color_x=RobotRaconteur::RRArrayToScalar<uint16_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"color_x")->CastData<RobotRaconteur::RRArray<uint16_t > >());
ret->color_y=RobotRaconteur::RRArrayToScalar<uint16_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"color_y")->CastData<RobotRaconteur::RRArray<uint16_t > >());
ret->depth_x=RobotRaconteur::RRArrayToScalar<uint16_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"depth_x")->CastData<RobotRaconteur::RRArray<uint16_t > >());
ret->depth_y=RobotRaconteur::RRArrayToScalar<uint16_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"depth_y")->CastData<RobotRaconteur::RRArray<uint16_t > >());
ret->x=RobotRaconteur::RRArrayToScalar<double >(RobotRaconteur::MessageElement::FindElement(m->Elements,"x")->CastData<RobotRaconteur::RRArray<double > >());
ret->y=RobotRaconteur::RRArrayToScalar<double >(RobotRaconteur::MessageElement::FindElement(m->Elements,"y")->CastData<RobotRaconteur::RRArray<double > >());
ret->z=RobotRaconteur::RRArrayToScalar<double >(RobotRaconteur::MessageElement::FindElement(m->Elements,"z")->CastData<RobotRaconteur::RRArray<double > >());
return ret;
}

HandTracker_stub::HandTracker_stub(const std::string &path, RR_SHARED_PTR<RobotRaconteur::ClientContext> c) : RobotRaconteur::ServiceStub(path,c){ }
void HandTracker_stub::RRInitStub()
{
}

uint8_t HandTracker_stub::EnableSensors()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"EnableSensors");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::RRArrayToScalar<uint8_t >(rr_me->CastData<RobotRaconteur::RRArray<uint8_t > >());
}

uint8_t HandTracker_stub::DisableSensors()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"DisableSensors");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::RRArrayToScalar<uint8_t >(rr_me->CastData<RobotRaconteur::RRArray<uint8_t > >());
}

RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader > HandTracker_stub::getImageHeader()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getImageHeader");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<edu::rpi::cats::sensors::camera_interface::ImageHeader >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader > HandTracker_stub::getDepthImageHeader()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getDepthImageHeader");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<edu::rpi::cats::sensors::camera_interface::ImageHeader >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image > HandTracker_stub::getCurrentImage()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getCurrentImage");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<edu::rpi::cats::sensors::camera_interface::Image >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image16 > HandTracker_stub::getCurrentDepthImage()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getCurrentDepthImage");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<edu::rpi::cats::sensors::camera_interface::Image16 >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

RR_SHARED_PTR<HandData > HandTracker_stub::getLeftHand()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getLeftHand");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<HandData >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

RR_SHARED_PTR<HandData > HandTracker_stub::getRightHand()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getRightHand");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<HandData >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

void HandTracker_stub::DispatchEvent(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void HandTracker_stub::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void HandTracker_stub::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry>HandTracker_stub::CallbackCall(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
std::string ename=rr_m->MemberName;
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_CallbackCallRet, ename);
rr_mr->ServicePath=rr_m->ServicePath;
rr_mr->TransactionID=rr_m->TransactionID;
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

std::string HandTracker_stub::RRType()
{
return "edu.rpi.cats.sensors.kinect2_tracker.HandTracker";
}
void HandTracker_stub::RRClose()
{
ServiceStub::RRClose();
}

void HandTracker_stub::async_EnableSensors(boost::function<void (uint8_t, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"EnableSensors");
AsyncProcessTransaction(rr_req,boost::bind(&HandTracker_stub::rrend_EnableSensors, RobotRaconteur::rr_cast<HandTracker_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void HandTracker_stub::rrend_EnableSensors(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (uint8_t ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
uint8_t rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::RRArrayToScalar<uint8_t >(me->CastData<RobotRaconteur::RRArray<uint8_t > >());
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(0,RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void HandTracker_stub::async_DisableSensors(boost::function<void (uint8_t, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"DisableSensors");
AsyncProcessTransaction(rr_req,boost::bind(&HandTracker_stub::rrend_DisableSensors, RobotRaconteur::rr_cast<HandTracker_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void HandTracker_stub::rrend_DisableSensors(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (uint8_t ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
uint8_t rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::RRArrayToScalar<uint8_t >(me->CastData<RobotRaconteur::RRArray<uint8_t > >());
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(0,RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void HandTracker_stub::async_getImageHeader(boost::function<void (RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getImageHeader");
AsyncProcessTransaction(rr_req,boost::bind(&HandTracker_stub::rrend_getImageHeader, RobotRaconteur::rr_cast<HandTracker_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void HandTracker_stub::rrend_getImageHeader(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<edu::rpi::cats::sensors::camera_interface::ImageHeader >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void HandTracker_stub::async_getDepthImageHeader(boost::function<void (RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getDepthImageHeader");
AsyncProcessTransaction(rr_req,boost::bind(&HandTracker_stub::rrend_getDepthImageHeader, RobotRaconteur::rr_cast<HandTracker_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void HandTracker_stub::rrend_getDepthImageHeader(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<edu::rpi::cats::sensors::camera_interface::ImageHeader >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void HandTracker_stub::async_getCurrentImage(boost::function<void (RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getCurrentImage");
AsyncProcessTransaction(rr_req,boost::bind(&HandTracker_stub::rrend_getCurrentImage, RobotRaconteur::rr_cast<HandTracker_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void HandTracker_stub::rrend_getCurrentImage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<edu::rpi::cats::sensors::camera_interface::Image >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void HandTracker_stub::async_getCurrentDepthImage(boost::function<void (RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image16 >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getCurrentDepthImage");
AsyncProcessTransaction(rr_req,boost::bind(&HandTracker_stub::rrend_getCurrentDepthImage, RobotRaconteur::rr_cast<HandTracker_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void HandTracker_stub::rrend_getCurrentDepthImage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image16 > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image16 >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image16 >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image16 > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<edu::rpi::cats::sensors::camera_interface::Image16 >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image16 >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image16 >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void HandTracker_stub::async_getLeftHand(boost::function<void (RR_SHARED_PTR<HandData >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getLeftHand");
AsyncProcessTransaction(rr_req,boost::bind(&HandTracker_stub::rrend_getLeftHand, RobotRaconteur::rr_cast<HandTracker_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void HandTracker_stub::rrend_getLeftHand(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<HandData > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<HandData >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<HandData >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<HandData > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<HandData >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<HandData >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<HandData >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void HandTracker_stub::async_getRightHand(boost::function<void (RR_SHARED_PTR<HandData >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getRightHand");
AsyncProcessTransaction(rr_req,boost::bind(&HandTracker_stub::rrend_getRightHand, RobotRaconteur::rr_cast<HandTracker_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void HandTracker_stub::rrend_getRightHand(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<HandData > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<HandData >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<HandData >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<HandData > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<HandData >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<HandData >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<HandData >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}

void HandTracker_skel::Init(const std::string& path, RR_SHARED_PTR<RobotRaconteur::RRObject> object, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
uncastobj=object;
rr_InitPipeServersRun=false;
rr_InitWireServersRun=false;
ServiceSkel::Init(path,object,context);
}
RR_SHARED_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker > HandTracker_skel::get_obj()
{
return RobotRaconteur::rr_cast<edu::rpi::cats::sensors::kinect2_tracker::HandTracker >(uncastobj);
}
RR_SHARED_PTR<edu::rpi::cats::sensors::kinect2_tracker::async_HandTracker > HandTracker_skel::get_asyncobj()
{
return RR_DYNAMIC_POINTER_CAST<edu::rpi::cats::sensors::kinect2_tracker::async_HandTracker >(uncastobj);
}
void HandTracker_skel::ReleaseCastObject() 
{
}
std::string HandTracker_skel::GetObjectType()
{
return "edu.rpi.cats.sensors.kinect2_tracker.HandTracker";
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> HandTracker_skel::CallGetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetRes,m->MemberName);
RR_SHARED_PTR<edu::rpi::cats::sensors::kinect2_tracker::async_HandTracker > async_obj=get_asyncobj();
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> HandTracker_skel::CallSetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetRes,m->MemberName);
RR_SHARED_PTR<edu::rpi::cats::sensors::kinect2_tracker::async_HandTracker > async_obj=get_asyncobj();
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> HandTracker_skel::CallFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallRes,rr_m->MemberName);
RR_SHARED_PTR<edu::rpi::cats::sensors::kinect2_tracker::async_HandTracker > async_obj=get_asyncobj();
if (rr_m->MemberName == "EnableSensors")
{
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel>(shared_from_this());
async_obj->async_EnableSensors(boost::bind(&edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel::rr_EnableSensors, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
uint8_t rr_return=get_obj()->EnableSensors();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(rr_return))));
return rr_mr;
}
}
if (rr_m->MemberName == "DisableSensors")
{
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel>(shared_from_this());
async_obj->async_DisableSensors(boost::bind(&edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel::rr_DisableSensors, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
uint8_t rr_return=get_obj()->DisableSensors();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(rr_return))));
return rr_mr;
}
}
if (rr_m->MemberName == "getImageHeader")
{
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel>(shared_from_this());
async_obj->async_getImageHeader(boost::bind(&edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel::rr_getImageHeader, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader > rr_return=get_obj()->getImageHeader();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "getDepthImageHeader")
{
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel>(shared_from_this());
async_obj->async_getDepthImageHeader(boost::bind(&edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel::rr_getDepthImageHeader, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader > rr_return=get_obj()->getDepthImageHeader();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "getCurrentImage")
{
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel>(shared_from_this());
async_obj->async_getCurrentImage(boost::bind(&edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel::rr_getCurrentImage, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image > rr_return=get_obj()->getCurrentImage();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "getCurrentDepthImage")
{
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel>(shared_from_this());
async_obj->async_getCurrentDepthImage(boost::bind(&edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel::rr_getCurrentDepthImage, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image16 > rr_return=get_obj()->getCurrentDepthImage();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "getLeftHand")
{
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel>(shared_from_this());
async_obj->async_getLeftHand(boost::bind(&edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel::rr_getLeftHand, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<HandData > rr_return=get_obj()->getLeftHand();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "getRightHand")
{
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel>(shared_from_this());
async_obj->async_getRightHand(boost::bind(&edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel::rr_getRightHand, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<HandData > rr_return=get_obj()->getRightHand();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void HandTracker_skel::rr_EnableSensors(RR_WEAK_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> skel, uint8_t ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(ret)));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void HandTracker_skel::rr_DisableSensors(RR_WEAK_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> skel, uint8_t ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(ret)));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void HandTracker_skel::rr_getImageHeader(RR_WEAK_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> skel, RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void HandTracker_skel::rr_getDepthImageHeader(RR_WEAK_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> skel, RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::ImageHeader > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void HandTracker_skel::rr_getCurrentImage(RR_WEAK_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> skel, RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void HandTracker_skel::rr_getCurrentDepthImage(RR_WEAK_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> skel, RR_SHARED_PTR<edu::rpi::cats::sensors::camera_interface::Image16 > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void HandTracker_skel::rr_getLeftHand(RR_WEAK_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> skel, RR_SHARED_PTR<HandData > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void HandTracker_skel::rr_getRightHand(RR_WEAK_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> skel, RR_SHARED_PTR<HandData > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void HandTracker_skel::RegisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RR_SHARED_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker > obj=RobotRaconteur::rr_cast<edu::rpi::cats::sensors::kinect2_tracker::HandTracker >(rrobj1);
RobotRaconteur::ServiceSkel::RegisterEvents(rrobj1);
}

void HandTracker_skel::UnregisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RobotRaconteur::ServiceSkel::UnregisterEvents(rrobj1);
}

RR_SHARED_PTR<RobotRaconteur::RRObject> HandTracker_skel::GetSubObj(const std::string &name, const std::string &ind)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void HandTracker_skel::InitPipeServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitPipeServersRun) return;
rr_InitPipeServersRun=true;
RR_SHARED_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker > obj=RobotRaconteur::rr_cast<edu::rpi::cats::sensors::kinect2_tracker::HandTracker >(rrobj1);
}

void HandTracker_skel::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> HandTracker_skel::CallPipeFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void HandTracker_skel::InitWireServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitWireServersRun) return;
rr_InitWireServersRun=true;
RR_SHARED_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker > obj=RobotRaconteur::rr_cast<edu::rpi::cats::sensors::kinect2_tracker::HandTracker >(rrobj1);
}

void HandTracker_skel::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> HandTracker_skel::CallWireFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void HandTracker_skel::InitCallbackServers(RR_SHARED_PTR<RobotRaconteur::RRObject> o)
{
RR_SHARED_PTR<edu::rpi::cats::sensors::kinect2_tracker::HandTracker > obj=RobotRaconteur::rr_cast<edu::rpi::cats::sensors::kinect2_tracker::HandTracker >(o);
}
RR_SHARED_PTR<void> HandTracker_skel::GetCallbackFunction(uint32_t endpoint, const std::string& membername)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> HandTracker_skel::CallMemoryFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::Endpoint> e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
}
}
}
}
}

